#!/usr/bin/env php
<?php

declare(strict_types=1);

set_error_handler(static function (int $severity, string $message): void {
    throw new ErrorException($message);
});

use GenderDetector\Exception\FileReadingException;
use GenderDetector\GenderDetector;

const GENDER_UNKNOWN = 'unknown';

require_autoload();
main($argv);

function require_autoload(): void
{
    foreach ([
        __DIR__ . '/../vendor/autoload.php',
        __DIR__ . '/../../../autoload.php'
    ] as $path) {
        if (file_exists($path)) {
            require $path;
            return;
        }
    }

    exit_with_error('install dependencies using Composer.');
}

function exit_with_error(string $message): void
{
    fwrite(STDERR, 'Error: ' . $message . "\n");
    exit(1);
}

function parse_args(array $args): array
{
    if (count($args) <= 1) {
        exit_with_error('expected at least 1 argument');
    }

    $names = [];
    $country = null;
    $unknown = null;

    unset($args[0]);
    foreach ($args as $arg) {
        switch (true) {
            case strpos($arg, '--country') === 0:
                $country = parse_option($arg);
                break;
            case strpos($arg, '--unknown') === 0:
                $unknown = parse_option($arg);
                break;
            case strpos($arg, '--help') === 0:
                print_help();
                exit(0);
            case strpos($arg, '--') === 0:
                exit_with_error(sprintf('unrecognised option "%s"', $arg));
            default:
                $names[] = $arg;
        }
    }

    return [$names, $country, $unknown];
}

function parse_option(string $option): string
{
    try {
        [ , $value] = explode('=', $option);
    } catch (Throwable $t) {
        exit_with_error(sprintf('could not parse option "%s". See "--help"', $option));
    }

    return $value;
}

function print_help(): void
{
    fwrite(STDOUT, <<<HELP
    Usage: 
        gender-detector name1 [name2 ...] [--country=country_name] [--unknown=unisex]
    
    Example: 
        gender-detector jane
        gender-detector elon steven --country=usa
        gender-detector martin --country=usa
    HELP . "\n");
}

function main(array $argv): void
{
    try {
        $detector = new GenderDetector();
    } catch (FileReadingException $e) {
        exit_with_error($e->getMessage());
    }

    [$names, $country, $unknown] = parse_args($argv);

    if (empty($names)) {
        exit_with_error('expected at least 1 name');
    }

    $detector->setUnknownGender($unknown ?? GENDER_UNKNOWN);

    $detected = [];
    foreach ($names as $name) {
        try {
            $detected[] = $detector->detect($name, $country);
        } catch (Throwable $t) {
            exit_with_error($t->getMessage());
        }
    }

    fwrite(STDOUT, implode(' ', $detected) . "\n");
}
